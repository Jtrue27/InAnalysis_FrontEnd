<!DOCTYPE HTML>
<html>
	<head>
		<title>蹦世界小工具</title>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<!--[if lte IE 8]><script src="assets/js/ie/html5shiv.js"></script><![endif]-->
		<link rel="stylesheet" href="assets/css/main.css" />
		<!--[if lte IE 8]><link rel="stylesheet" href="assets/css/ie8.css" /><![endif]-->
		<!--[if lte IE 9]><link rel="stylesheet" href="assets/css/ie9.css" /><![endif]-->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css" integrity="sha384-9gVQ4dYFwwWSjIDZnLEWnxCjeSWFphJiwGPXr1jddIhOegiu1FwO5qRGvFXOdJZ4" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-slider/10.0.2/css/bootstrap-slider.min.css" crossorigin="anonymous">
    <link href="https://use.fontawesome.com/releases/v5.0.6/css/all.css" rel="stylesheet">
    <style>
      @font-face {
        font-family: popworld;
        src: url(./assets/fonts/popworld.ttf);
      }

      .speechSettingPanel{
        padding: 2em;
        border: solid 2px #000;
        border-radius: 2em;
      }

      .slider-selection {
        position: absolute;
        background-image: -webkit-linear-gradient(top,#f9f9f9 0,#247143 100%);
        background-image: -o-linear-gradient(top,#f9f9f9 0,#247143 100%);
        background-image: linear-gradient(to bottom,#f9f9f9 0,#247143 100%);
      }

      .task-item{
        position: relative;
        transition: .5s background-color;
        cursor: pointer;
      }

      .taskTitle{
         text-overflow: ellipsis;
         width: 100%;
         display: inline-block;
         white-space: nowrap;
         overflow: hidden;
         transition: .5s height;
      }

      .taskMP3{
        text-align: right;
        display: block;
        color: #a01313;
      }

      .active .taskTitle{
        white-space: initial;
      }

      .list-group-item.active{
        color: #000;
        background-color: #bcd8b6;
      }

      .itemTrash{
        transition: .3s background-color, .3s color;
        cursor: pointer;
        display: inline-block;
        position: absolute;
        right: 0;
        padding: 1em;
        background-color: #d8d8d8;
        border-radius: 50%;
        width: 3em;
        height: 3em;
        text-align: center;
        color: #000;
      }

      .itemTrash:hover{
        background-color: #f00;
        color: #fff;
      }

      .itemTrash div{
        display: flex;
        justify-content: center;
        align-items: center;
      }

			.ssml-desc{
				background-color: #eee;
		    margin: .5em;
		    padding: 1em;
			}
    </style>
	</head>
	<body>
    <div class="container">
      <section id="app" class="my-5">
        <h2 class="text-center" style="font-family:popworld;text-shadow: 3px 3px 10px #b1b1b1;">導覽文字語音自動生成</h2>
        <div class="row">

          <div class="col-12 col-md-7 mt-3">
            <div class="speechSettingPanel">
              <h4 class="text-center">產生新的語音</h4>
              <label for="inputLang">導覽文字的語言</label>
              <select class="form-control mb-3" id="inputLang" v-model="inputLang">
                <option v-for="(lang,index) in langList" v-bind:value="lang.value">{{lang.label}}</option>
              </select>
              <label for="inputText">導覽文字的內容</label>
              <textArea class="form-control" rows="10" id="inputText" v-model="inputText"></textarea>
							<div>
								<button class="btn mt-3" :class="{'btn-success': inputSSML, 'btn-secondary': !inputSSML}" @click="inputSSML = !inputSSML;">
									<i class="far fa-check-square" v-show="inputSSML"></i><i class="far fa-square" v-show="!inputSSML"></i> 使用SSML
								</button>
								<div v-show="inputSSML" class="ssml-desc">

									<p>
										SSML常用標籤
										<ul>
											<li>&lt;speak&gt;：框住所有要被轉成語音的內容</li>
											<li>&lt;break time="1s"/&gt;：停留秒數，範例為1秒(1 second)</li>
										</ul>
									</p>

									<a href="https://cloud.google.com/text-to-speech/docs/ssml" target="_blank">SSML完整說明</a>
								</div>

							</div>
              <div class="mt-5">
                <label >語音速度</label>
                <input id="speed" data-slider-id='speedSlider' type="text" data-slider-min="0.25" data-slider-max="4" data-slider-step="0.05" data-slider-value="1"/>
                <span class="pl-3">{{speakSpeed}}</span>
              </div>

              <div class="mt-5">
                <label >語音腔調</label>
                <input id="pitch" data-slider-id='picthSlider' type="text" data-slider-min="-20" data-slider-max="20" data-slider-step="0.20" data-slider-value="0"/>
                <span class="pl-3">{{speakPitch}}</span>
              </div>

              <div class="text-center">
                <input type="button" v-bind:disabled="inputText==''" class="btn btn-success btn-block d-md-inline-block mt-3" v-on:click="addTask" value="開始產生" />
              </div>

            </div>
          </div>

          <div class="col-12 col-md-5 mt-3">

            <div class="speechSettingPanel" v-show="tasks.length>0">
              <div id="previewDiv" style="position: relative;">
              </div>
              <div class="list-group">
                <h4 class="text-center">語音列表</h4>
                <a v-for="(item, index) in tasks" v-bind:class="{'active': item.active}" class="list-group-item list-group-item-action task-item" v-on:click="showStatus(item)">

                  <span class="taskTitle">
                    <i v-show="item.status!='complete'" style="color:#ddd" class="fas fa-spinner fa-spin"></i>
                    <i v-show="item.status=='complete'" style="color:#35bb35" class="fas fa-check"></i>
                    {{item.title}}
                  </span>
                  <span class="taskMP3" v-show="item.mp3!=''">[語音檔：{{item.mp3}}]</span>
                </a>
              </div>
              <div class="text-center" v-show="tasks.length>1">
                <input type="button" v-bind:disabled="ajaxing" class="btn btn-success btn-block d-md-inline-block mt-3" v-on:click="downloadAll" value="產生語音壓縮檔" />
                <div v-show="(ziplink!='' && !ajaxing)">
                  <a v-bind:href="ziplink">點此下載語音壓縮檔</a>
                </div>
              </div>
            </div>

          </div>

        </div>

      </section>

    </div>

    <div class="modal" id="deleteModal" tabindex="-1" role="dialog">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">移除確認</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <p>確定移除這個語音?</p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">取消</button>
            <button type="button" class="btn btn-danger" onclick="removeActive()">移除</button>
          </div>
        </div>
      </div>
    </div>
	</body>
</html>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js" integrity="sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh" crossorigin="anonymous"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-slider/10.0.2/bootstrap-slider.min.js" crossorigin="anonymous"></script>

<script src="https://cdn.jsdelivr.net/npm/vue"></script>
<script>
  var app = null;
  var autoTransApp = null;


  function initTextToSpeechApp(){
		app = new Vue({
			el: '#app',
			data: {
        ajaxing: false,
        inputText: '',
        speakSpeed: "1.0",
        speakPitch: "0",
        ziplink: '',
        tasks: [],
        langList: [{
          value: 'en6',
          label: 'English-A'
        }, {
          value: 'en5',
          label: 'English-B'
        }, {
          value: 'en4',
          label: 'English-C'
        }, {
          value: 'en3',
          label: 'English-D'
        }, {
          value: 'en2',
          label: 'English-E'
        }, {
          value: 'en1',
          label: 'English-F'
        }, {
          value: 'jp',
          label: '日本語'
        }, {
          value: 'jp2',
          label: '日本語-new'
        }, {
          value: 'kr',
          label: '韓文'
        }, {
          value: 'kr2',
          label: '韓文-new'
        }],
        inputLang: 'en6',
				inputSSML: false,
      },
			watch: {
				inputSSML: function(val){
					if(val){
						if(this.inputText.trim().startsWith("<speak>") && this.inputText.trim().endsWith("</speak>")){

						}else{
							this.inputText = "<speak>" + this.inputText.trim() + "</speak>";
						}
					}else{
						if(this.inputText.trim().startsWith("<speak>") && this.inputText.trim().endsWith("</speak>")){
							this.inputText = this.inputText.trim();
							this.inputText = this.inputText.substring(7, this.inputText.length-8);
						}else{

						}
					}
				},
			},
			updated: function(){

			},
			computed: {
        submitText: function(){
          if(this.ajaxing){
            return 'MP3 Generating...';
          }else{
            return 'To Speech!!';
          }
        }
			},
			methods: {
        clear: function(){
          this.inputText = '';
        },
        trans: function(){
          const _this = this;
          speechAPI({
            text: _this.inputText,
            lang: _this.inputLang,
            speed: _this.speakSpeed,
            pitch: _this.speakPitch
          }, function(){
            app.ajaxing = true;
            $('#audioOutputs *').remove();
          }, function(){
            app.ajaxing = false;
          }, function(d){
            $('#audioOutputs').append('<audio controls><source src="./mp3/'+d.mp3+'" type="audio/mpeg"></audio>');
            $('audio')[0].play();
          });


        },

        addTask: function(){
          const title = this.inputText;

          const setting = {
            text: this.inputText,
            lang: this.inputLang,
						ssml: this.inputSSML,
            speed: this.speakSpeed,
            pitch: this.speakPitch
          };
          const task = {
            title,
            setting,
            status: 'waiting',
            mp3: '',
            active: false,
          };
          this.tasks.push(task);
          speechAPI(setting, function(){
            task.status = 'generating';
          }, function(){}, function(d){
            task.mp3 = d.mp3;
            task.status = 'complete';
          });
          this.clear();
        },

        showStatus: function(item){
          //console.log(item);
          this.clearPreview();
          if(item.active){
            item.active = false;
          }else{
            this.deactiveAll();
            item.active = true;

            if(item.status == 'waiting'){
              $('#previewDiv').append($('<h3>這個語音檔還在排隊中!</h3>'));
            }else if(item.status == 'generating'){
              $('#previewDiv').append($('<h3>這個語音檔還在產生中!</h3>'));
            }else if(item.status == 'complete'){
              $('#previewDiv').append($('<audio controls><source src="./mp3/'+item.mp3+'" type="audio/mpeg"></audio>'));
              $('#previewDiv').append($('<div class="itemTrash" onclick="showDeleteModal()"><div><i class="fas fa-trash-alt"></i><div></div>'));

            }
          }
        },

        clearPreview: function(){
          $('#previewDiv *').remove();
        },

        deactiveAll: function(){
          for(let i=0;i<this.tasks.length;i++){
            this.tasks[i].active = false;
          }
        },

        removeActive: function(){
          for(let i=0;i<this.tasks.length;i++){
            if(this.tasks[i].active){
              this.tasks[i].active = false;
              this.tasks.splice(i, 1);
              this.clearPreview();
              return;
            }
          }
        },

        downloadAll: function(){
          let filenames = [];
          for(let i=0;i<this.tasks.length;i++){
            const task = this.tasks[i];
            if(task.status == 'complete'){
              filenames.push(task.mp3);
            }
          }
          const data = {
            filenames
          };
          const _this = this;
          zipAPI(data, function(){
            _this.ajaxing = true;
          }, function(){
            _this.ajaxing = false;
          }, function(d){
            _this.ziplink = './zips/'+d.zip;
            console.log(d);
          });
        },
			}
		});
	}


  function speechAPI(data, beforeAction, afterAction, callback, error){
    $.ajax({
      url: '<%=webAttrs.webroot%>/speech',
      data: JSON.stringify(data),
      method: 'POST',
      contentType : 'application/json',
      beforeSend: function(){
        if(beforeAction!=null){
          beforeAction();
        }
      },
      success: function(d){
        if(callback!=null){
          callback(d);
        }
      },
      error: function(e, e2, e3){
        if(error!=null){
          error(e);
        }
      },
      complete: function(){
        if(afterAction!=null){
          afterAction();
        }
      }
    });
  }

  function zipAPI(data, beforeAction, afterAction, callback, error){
    $.ajax({
      url: '<%=webAttrs.webroot%>/zip',
      data: JSON.stringify(data),
      method: 'POST',
      contentType : 'application/json',
      beforeSend: function(){
        if(beforeAction!=null){
          beforeAction();
        }
      },
      success: function(d){
        if(callback!=null){
          callback(d);
        }
      },
      error: function(e, e2, e3){
        if(error!=null){
          error(e);
        }
      },
      complete: function(){
        if(afterAction!=null){
          afterAction();
        }
      }
    });
  }

  function showDeleteModal(){
    $('#deleteModal').modal('show');
  }

  function removeActive(){
    app.removeActive();
    $('#deleteModal').modal('hide');
  }

  function initApp(){
    initTextToSpeechApp();
  }

  $(document).ready(function(){
    initApp();

    $('#speed').slider({
    	formatter: function(value) {
        app.speakSpeed = value;
    		return 'Current value: ' + value;
    	}
    });

    $('#pitch').slider({
    	formatter: function(value) {
        app.speakPitch = value;
    		return 'Current value: ' + value;
    	}
    });
  });
</script>
