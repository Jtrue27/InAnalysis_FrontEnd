<!DOCTYPE HTML>
<html id="top">
	<head>
    <title>Popworld socket遊戲測試</title>

    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

		<% include include/css %>

    <style>
      .appMain{
        position: absolute;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
      }

			.fullHeight{
				height: 100%;
			}

			.chat-panel{

			}

			.chat-panel-inner{
				border: solid 1px #444;
		    background-color: #666;
		    padding: 1em;
		    border-radius: 10px;
				display: flex;
				flex-direction: column;
				height: 100%;
			}

			.chatContent{
				background-color: #000;
		    padding: .5em;
		    flex: 1 0;
		    overflow-y: scroll;
			}

			.msg-div{

			}

			.msg-time{
				font-size: .5em;
				opacity: 0;
				transition: opacity .4s ease;
			}

			.msg-div:hover>.msg-time{
				opacity: .5;
			}

			.chatBtn{
		    flex: 0 0;
			}
    </style>
  </head>
	<body>
		<div id="app" class="appMain bg-secondary">

      <div v-show="step == 'init'">
        <div class="form-group text-center border border-primary rounded p-5 bg-dark text-light">
          <label for="initialInputName">請輸入您的姓名</label>
          <input type="text" class="form-control" id="initialInputName" v-model="name">
          <button class="btn btn-outline-light mt-2" @click="connectChat">確定</button>
        </div>
      </div>

      <div v-show="step == 'connected'" class="container fullHeight">
				<div class="row fullHeight">

					<div class="col-12 col-md-6 p-3 chat-panel text-light">
						<div class="chat-panel-inner">

							<div class="chatContent">
								<div v-for="(item, index) in revChatMsgs">
									<div v-if="item.type == 'hello'" class="msg-div">
										<span v-text="item.name + ' 加入聊天室。'"></span><span class="msg-time" v-text="item.msgtime"></span>
									</div>

									<div v-if="item.type == 'exit'" class="msg-div">
										<span v-text="item.name + ' 離開聊天室。'"></span><span class="msg-time" v-text="item.msgtime"></span>
									</div>

									<div v-if="item.type == 'normal'" class="msg-div">
										<span v-text="item.name + ' : ' + item.msg"></span><span class="msg-time" v-text="item.msgtime"></span>
									</div>
								</div>
							</div>

							<div class="chatBtn">
								<div class="input-group my-2">
									<input type="text" class="form-control" v-on:keyup.enter="sendChatMsg" placeholder="請輸入聊天訊息" v-model="inputChatMsg">
									<div class="input-group-append">
										<button class="btn btn-outline-light" type="button" @click="sendChatMsg">送出</button>
									</div>
								</div>
							</div>
						</div>
					</div>

					<div class="col-12 col-md-6">
					</div>

				</div>
      </div>
		</div>
	</body>
</html>
<% include include/scripts %>
<script src="/assets/js/socket.io.js"></script>
<script>
  var chatSocket = null;
  var app = null;

  function initApp(){
    app = new Vue({
      el: '#app',
      data: {
        name: 'NoName',
        step: 'init',

        //chat
        chatMsgs: [],
				inputChatMsg: '',
      },
      mounted: function(){

      },
      watch: {

      },
      updated: function(){

      },
      computed: {
				revChatMsgs: function (numbers) {
			    return this.chatMsgs.slice().reverse();
			  }
      },
      methods: {
        connectChat: function(){
          const _this = this;
          chatSocket = io.connect('/chat');

          chatSocket.on('msg', function(data) {
            _this.chatMsgs.push({
              type: 'normal',
              name: data.name,
              msg: data.msg,
							msgtime: new Date().toLocaleTimeString(),
            });
						$('.chatContent').scrollTop($('.chatContent').height());
          });

          chatSocket.on('helloMsg', function(data) {
            _this.chatMsgs.push({
              type: 'hello',
              name: data.name,
							msgtime: new Date().toLocaleTimeString(),
            });
          });

          chatSocket.on('exitMsg', function(data) {
            _this.chatMsgs.push({
              type: 'exit',
              name: data.name,
							msgtime: new Date().toLocaleTimeString(),
            });
          });

          chatSocket.emit('setName', { name: _this.name });
					_this.step = 'connected';
        },
				sendChatMsg: function(){
					if(this.inputChatMsg.trim().length > 0){
						chatSocket.emit('receiveMsg', {
							msg: this.inputChatMsg.trim(),
						});
						this.inputChatMsg = '';
					}
				},
      }
    });
  }

  $(document).ready(function(){
		initApp();

  });
</script>
